"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a_tcqbn=txo6fnpeo-cj!)#-0fh=jhwz9cvl=zk5d*8-t0kl=h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS=['*']
CORS_ORIGIN_ALLOW_ALL = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # dependencies here 
    'rest_framework',  
    'django_filters',
    'corsheaders',

    #! register apps here (change appName and configName)
    'auth_app.apps.AuthAppConfig', 

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---------------------------------------------------------------------------- #
#                                 ! My added                                   #
# ---------------------------------------------------------------------------- #

# Basic auth
REST_FRAMEWORK = {
	'DEFAULT_FILTER_BACKENDS' : ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework.authentication.BasicAuthentication'],
    'DEFAULT_PERMISSION_CLASSES' : [ 'rest_framework.permissions.IsAuthenticated' ] 
 }

#SMTP Configuration



# ---------------------------------------------------------------------------- #
#                                ! Heroku setup                                #
# ---------------------------------------------------------------------------- #

#*1. first install this in .env =  pip install psycopg2 gunicorn django-heroku whitenoise
#*2. do this steps in .env =   pip freeze > requirements.txt
#*3. Create an app on Heroku (new> location = US > Hit create)
#*4. Heroku site> current proj > resources > add-ons > heroku postgres > free plan > submit order

#*5. Heroku site> current proj> res > postgres > view credentials, paste creds in below snippet 
# DATABASES = { 
#     'default': { 
#         'ENGINE': 'django.db.backends.postgresql_psycopg2', # keep this same
#         'NAME': '',  # this means Database key
#         'USER': '',
#         'PASSWORD' : '',
#         'HOST' : '',
#         'PORT' : '',
#     } 
# }

#*6. Comment the local DB below ( after adding above snippet)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}



#*7. Uncomment below lines
# import django_heroku 
# import os

# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATIC_URL = "/static/"
# django_heroku.settings(locals())



#*8. comment below line, after uncommenting above step 
STATIC_URL = 'static/'


#*9. Create empty git repo, and add this whole code folder to it

#*10. Paste this command in terminal, to upload to heroku
# heroku login ( a browser will open => hit log in ) ( then return back to terminal )
# heroku git:remote -a   ourCustomAppNameHERE
# git push heroku master
